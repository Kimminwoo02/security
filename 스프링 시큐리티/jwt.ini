# Json Web Token

JWT란?

당사자간에 정보를 JSON 객체로 안전하게 전송하기 위한 컴팩트하고 독립적인 방식을 정의하는 개방형 표준이다. 이 정보는 디지털 서명이 되어있어서 신뢰할 수 있다. 비밀(HMAC 알고리즘) 또는 RSA, ECDSA를 사용하는 공개/ 개인 키 쌍을 사용하여 서명할 수 있다. 

JWT를 암호화하여 당사자간에 비밀을 제공할 수도 있지만 서명된 토큰에 중점을 둔다. 서명 된 토큰은 그 안에 포함된 클레임의 무결성을 확인할 수 있는 반면 암호화된 토큰은 다른 당사자로부터 이러한 클레임을 숨긴다. 공개/ 개인 키 쌍을 사용하여 토큰에 서명할 때 서명은 개인 키를 보유한 당사자 만이 서명한 사람임을 인증할 수 있다.

### JSON 웹 토큰 구조

압축 형식의 JSON 웹 토큰은 점으로 구분 된 세 부분으로 구성된다.

- 헤더
- 유효 탑재량 (payload)
- 서명

![스크린샷 2023-10-29 오후 1.08.58.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/5a6a34ec-a51c-4a41-a291-1e51029bf2c9/485a539f-98f8-40e7-9c97-006fa3a5435b/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2023-10-29_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_1.08.58.png)

Header : 헤더는 일반적으로 토큰 유형과 사용중인 서명 알고리즘. 총 두 부분으로 구성되어있다.

```java
{
	"alg" : "HS256",
	"typ": "JWT"
}
```

이 JSON은 Base64URL로 인코딩되어 JWT의 첫 번째 부분을 형성한다.

**BASE64 : 암호화와 복호화가 가능하다는 뜻**

Payload : 토큰의 두 번째 부분은 클레임을 포함하는 페이로드 이다. 클레임은 엔티티(사용자) 및 추가 데이터에 대한 설명이다. 소유권 주장에는 등록, 공개 및 비공개, 소유권의 세 가지 유형이 존재한다.

- 등록된 클레임 : 유용하고 상호 운용 가능한 클레임을 제공하기 위해 권장되는 미리 정의된 클레임 집합이다. 일부는 iss(발행자), exp(만료시간), sub(주제),aud(청중) 등을 포함한다.
- 공개 소유권 주장 : JWT를 사용하는 사람들이 원하는대로 정의할 수 있다. 그러나 충돌을 방지하려면 IANA JSON 웹 토큰 레지스트리에서 정의하거나 충돌 방지 네임 스페이스를 포함하는 URI로 정의해야한다.
- 개인 클레임 : 사용에 동의하고 등록 또는 공개클레임이 아닌 당사자간에 정보를 공유하기 위해 생성 된 사용자 지정 클레임이다.

```java
{
	"sub" : "123456789",
	"name" : "John Doe",
	"admin" : true
}
```

Signature : 서명 부분을 만들려면 인코딩 된 페이로드, 비밀, 헤더에 지정된 알고리즘을 가져와서 서명해야 한다. 예를들어 HMAC SHA256알고리즘을 사용하려는 경우 다음과 같은 방식으로 생성된다.

```java
HMACSHA256(
	base64URIEncode(header) + "." + 
	base64UriEncode(payload).
	secret)

```

서명은 메세지가 변경되지 않았음을 확인하는 데 사용되고 개인 키로 서명된 토큰의 경우 JWT의 발신자가 자신이 말하는 사람인지 확인할 수 있다.

**모두 합친 값**