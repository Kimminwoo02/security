# OAuth2.0 Roles/ Client Types

OAuth2.0매커니즘은 다음 네 가지 종류의 역할을 담당하는 주체들에 의해 이루어지는 권한부여 체계이다.

1. Resource Owner(자원 소유자)
    - 보호된 자원에 대한 접근을 부여할 수 있는 주체, 사용자로서 계정의 일부에 대한 접근 권한을 부여하는 사람
    - 사용자를 대신하여 작동하려는 모든 클라이언트는 먼저 사용자의 허가를 받아야한다.
2. Resource Server(보호자원서버)
    - 타사 어플리케이션에서 접근하는 사용자의 자원이 포함된 서버를 의미한다.
    - 액세스 토큰을 수락 및 검증할 수 있어야 하며 권한 체계에 따라 요청을 승인할 수 있어야 한다.
3. Authorization Server(인가서버)
    - 클라이언트가 사용자 계정에 대한 동의 및 접근을 요청할 때 상호 작용하는 서버로서 클라이언트의 권한 부여 요청을 승인하거나 거부하는 서버
    - 사용자가 클라이언트에게 권한 부여 요청을 승인한 후 access token을 클라이언트에게 부여하는 역할
4. Client(클라이언트)
    - 사용자를 대신하여 권한을 부여받아 사용자의 리소스에 접근하려는 어플리케이션
    - 사용자를 권한 부여 서버로 안내하거나 사용자의 상호 작용 없이 권한 부여 서버로부터 직접 권한을 얻을 수 있다.

Oauth2.0 Rule



# Client Types

인증 서버에서 클라이언트를 등록할 때 클라이언트 자격 증명인 클라이언트 아이디와 클라이언트 암호를 받는다.

클라이언트 암호는 비밀이고 그대로 유지되어야 하는 반면 클라이언트 아이디는 공개이다. 이 자격 증명은 인증 서버에 대한 클라이언트 ID를 증명한다.

### 기밀 클라이언트

- 기밀 클라이언트는 client_secret의 기밀성을 유지할 수 있는 클라이언트를 의미한다.
- 일반적으로 사용핮가 소스코드에 액세스 할 수 없는 서버에서 실행되는 응용프로그램으로 Net, Java, PHP 및 Node.JS와 같은 서버 측 언어로 작성된다.
- 이러한 유형의 애플리케이션은 대부분 웹 서버에서 실행되기 때문에 일반적으로 “웹 앱” 이라고 한다.

### 공개 클라이언트

- 공개 클라이언트는 client_secret의 기밀을 유지할 수 없으므로 이러한 앱에는 secret이 사용되지 않는다.
- 브라우저(SPA)에서 실행되는 javascript 애플리케이션, Android 또는 IOS 모바일 앱, 데스크톱에서 실행되는 기본 앱 뿐만 아니라 IoT/임베디드 장치에서 실행되는 애플리케이션 등이 있다.
- Chrome 개발자 콘솔이나 디스어셈블러와 같은 디버깅 도구를 사용하여 바이너리/ 실행 코드에서 기밀 정보를 추출할 수 있기 때문에 공개로 간주된다.
- 서버측이 아닌 리소스 소유자가 사용하는 장치에서 실행되는 모든 클라이언트는 공개 클라이언트로 간주되어야 한다.